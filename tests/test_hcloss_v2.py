import torch
import math


def _surrogate_standard(bias, theta):
    beta = 100000.0
    output = torch.log(1 + beta * theta * torch.exp(bias)) / math.log(1 + beta)
    return output


def _surrogate_approximate(bias, theta):
    beta = 100000.0
    output = (torch.log(theta) + bias + math.log(beta)) / math.log(1 + beta)
    return output


def _surrogate_function(bias, theta):
    max_gap = 20.0
    v1 = _surrogate_standard(bias, theta)
    v2 = _surrogate_approximate(bias, theta)
    loss = torch.where(
        bias > max_gap,
        _surrogate_approximate(bias, theta),
        _surrogate_standard(bias, theta)
    )
    loss = loss.mean()
    return loss


def demo():
    bias = [[1.2162e+01],
            [-1.0230e+01],
            [-1.5343e+01],
            [-1.5263e+01],
            [-1.1807e+01],
            [-1.2259e+01],
            [-1.3591e+01],
            [-1.2245e+01],
            [-1.3997e+01],
            [-5.9641e+00],
            [-6.7016e+00],
            [-7.6152e+00],
            [-1.2831e+01],
            [-1.1201e+01],
            [-1.2341e+01],
            [-9.4515e+00],
            [1.0515e+00],
            [-7.5613e+00],
            [2.2504e+00],
            [-8.5108e+00],
            [-1.1380e+00],
            [4.2183e+00],
            [-3.5841e-02],
            [-3.4623e+00],
            [-6.7441e+00],
            [-8.8269e+00],
            [-6.5171e+00],
            [-6.9452e+00],
            [-3.8291e+00],
            [-7.6539e+00],
            [-6.4107e+00],
            [-8.2147e+00],
            [-1.1433e+01],
            [-1.1231e+01],
            [-1.4690e+01],
            [-1.2949e+01],
            [-1.4383e+01],
            [-1.2839e+01],
            [-1.1346e+01],
            [-1.1438e+01],
            [-8.6705e+00],
            [-8.8713e+00],
            [-8.1295e+00],
            [-8.2547e+00],
            [-1.3661e+01],
            [5.4597e+01],
            [-8.8876e+00],
            [-1.0153e+01],
            [-7.9299e+00],
            [6.8971e+00],
            [-6.6530e+00],
            [-9.2932e-01],
            [-1.2717e+01],
            [-9.4022e+00],
            [-9.5957e+00],
            [-4.5046e+00],
            [-1.2743e+01],
            [-1.3626e+01],
            [-1.9447e+00],
            [-1.3090e+01],
            [-8.4968e+00],
            [-7.9757e+00],
            [-6.9876e+00],
            [3.5853e-01]]

    theta = [[0.0201],
             [0.7143],
             [0.5279],
             [0.5120],
             [0.6021],
             [0.5355],
             [0.5073],
             [0.7090],
             [0.6515],
             [0.5009],
             [0.5000],
             [0.5062],
             [0.6629],
             [0.8122],
             [0.7609],
             [0.9383],
             [0.1035],
             [0.5263],
             [0.1117],
             [0.5251],
             [0.1410],
             [0.0868],
             [0.0892],
             [0.5001],
             [0.5670],
             [0.7718],
             [0.5889],
             [0.6636],
             [0.5103],
             [0.5094],
             [0.5840],
             [0.9570],
             [0.5010],
             [0.5011],
             [0.9347],
             [0.7935],
             [0.7508],
             [0.6081],
             [0.7194],
             [0.7155],
             [0.5409],
             [0.6215],
             [0.9033],
             [0.6682],
             [0.5452],
             [0.0096],
             [0.6540],
             [0.5139],
             [0.5000],
             [0.0198],
             [0.5000],
             [0.1684],
             [0.5070],
             [0.6071],
             [0.5015],
             [0.5465],
             [0.9035],
             [0.9106],
             [0.8793],
             [0.9913],
             [0.5883],
             [0.5007],
             [0.5001],
             [0.3996]]

    bias = torch.tensor(bias)
    theta = torch.tensor(theta)
    loss = _surrogate_function(bias, theta)
    print("loss:", loss)


if __name__ == "__main__":
    demo()
